---
---
<div id="star-container" class="fixed inset-0 pointer-events-none z-0"></div>

<script>
class Star {
  x: number;
  y: number;
  size: number;
  opacity: number;
  velocityX: number;
  velocityY: number;
  baseX: number;
  baseY: number;
  springFactor: number;
  dampening: number;

  constructor(x: number, y: number) {
    this.x = x;
    this.y = y;
    this.baseX = x;
    this.baseY = y;
    this.size = Math.random() * 3 + 1;
    this.opacity = 1;
    this.velocityX = 0;
    this.velocityY = 0;
    this.springFactor = 0.01;
    this.dampening = 0.95;
  }

  draw(ctx: CanvasRenderingContext2D) {
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
    ctx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;
    ctx.fill();

    // Add glow effect
    const gradient = ctx.createRadialGradient(
      this.x, this.y, 0,
      this.x, this.y, this.size * 2
    );
    gradient.addColorStop(0, `rgba(255, 255, 255, ${this.opacity * 0.3})`);
    gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
    ctx.fillStyle = gradient;
    ctx.fill();
  }

  update(mouseX: number, mouseY: number) {
    // Mouse repulsion
    const dx = this.x - mouseX;
    const dy = this.y - mouseY;
    const distance = Math.sqrt(dx * dx + dy * dy);
    const repulsionRadius = 100;

    if (distance < repulsionRadius) {
      const force = (1 - distance / repulsionRadius) * 0.8;
      this.velocityX += (dx / distance) * force;
      this.velocityY += (dy / distance) * force;
    }

    // Spring force back to original position
    const springX = (this.baseX - this.x) * this.springFactor;
    const springY = (this.baseY - this.y) * this.springFactor;

    this.velocityX += springX;
    this.velocityY += springY;

    // Apply dampening
    this.velocityX *= this.dampening;
    this.velocityY *= this.dampening;

    // Update position
    this.x += this.velocityX;
    this.y += this.velocityY;

    // Fade effect for trail stars
    if (this.baseX !== this.x) {
      this.opacity = Math.max(0, this.opacity - 0.002);
      this.size = Math.max(0.1, this.size - 0.01);
    }
  }
}

class TrailStar extends Star {
  speed: number;
  angle: number;
  lifetime: number;

  constructor(x: number, y: number) {
    super(x, y);
    this.speed = Math.random() * 0.5 + 0.1;
    this.angle = Math.random() * Math.PI * 2;
    this.lifetime = 1; // Full lifetime
  }

  update(mouseX: number, mouseY: number) {
    // Slower fade out
    this.opacity = Math.max(0, this.opacity - 0.001);
    this.size = Math.max(0.1, this.size - 0.005);
    
    // Add slight movement
    this.x += Math.cos(this.angle) * this.speed;
    this.y += Math.sin(this.angle) * this.speed;
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const container = document.getElementById('star-container');
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d')!;
  let backgroundStars: Star[] = [];
  let trailStars: TrailStar[] = [];
  let mouseX = 0;
  let mouseY = 0;
  let lastX = 0;
  let lastY = 0;
  let isMoving = false;
  let moveTimeout: number;
  
  // Add touch detection
  const isTouchDevice = () => {
    return ('ontouchstart' in window) || (navigator.maxTouchPoints > 0);
  };
  const isTouch = isTouchDevice();

  const resize = () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    backgroundStars = createBackgroundStars();
  };

  const init = () => {
    canvas.style.position = 'absolute';
    canvas.style.top = '0';
    canvas.style.left = '0';
    container?.appendChild(canvas);
    resize();
    window.addEventListener('resize', resize);
  };

  const createBackgroundStars = () => {
    const stars: Star[] = [];
    const count = Math.floor((canvas.width * canvas.height) / 10000);
    for (let i = 0; i < count; i++) {
      const x = Math.random() * canvas.width;
      const y = Math.random() * canvas.height;
      stars.push(new Star(x, y));
    }
    return stars;
  };

  const createTrailStars = (x: number, y: number, count: number) => {
    // Only create trail stars if not on touch device
    if (isTouch) return;
    
    for (let i = 0; i < count; i++) {
      const spread = isMoving ? 60 : 30;
      const offsetX = (Math.random() - 0.5) * spread;
      const offsetY = (Math.random() - 0.5) * spread;
      trailStars.push(new TrailStar(x + offsetX, y + offsetY));
    }
  };

  const animate = () => {
    ctx.fillStyle = 'rgba(0, 0, 0, 0.05)'; // Reduced opacity for longer trail
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Update and draw background stars
    backgroundStars.forEach(star => {
      // Only do mouse interaction if not on touch device
      if (!isTouch) {
        star.update(mouseX, mouseY);
      } else {
        // For touch devices, just keep stars in their original positions
        star.update(star.baseX, star.baseY);
      }
      star.draw(ctx);
    });

    // Only handle trail stars if not on touch device
    if (!isTouch) {
      // Create trail stars based on mouse movement
      if (Math.abs(mouseX - lastX) > 1 || Math.abs(mouseY - lastY) > 1) {
        createTrailStars(mouseX, mouseY, isMoving ? 8 : 4);
        lastX = mouseX;
        lastY = mouseY;
        isMoving = true;
        clearTimeout(moveTimeout);
        moveTimeout = setTimeout(() => {
          isMoving = false;
        }, 200) as unknown as number; // Extended timeout
      }

      // Update and draw trail stars
      trailStars = trailStars.filter(star => {
        star.update(mouseX, mouseY);
        star.draw(ctx);
        return star.opacity > 0.01 && star.size > 0.1;
      });
    }

    requestAnimationFrame(animate);
  };

  // Only add mouse events if not on touch device
  if (!isTouch) {
    document.addEventListener('mousemove', (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
    });
  }

  init();
  backgroundStars = createBackgroundStars();
  animate();
});
</script>
